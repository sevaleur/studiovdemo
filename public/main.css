/*!******************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./styles/index.scss ***!
  \******************************************************************************************************************************************************/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

.work__menu, .preloader, .content, body, html, .work, .home {
  height: 100%;
  width: 100%;
  position: absolute;
  top: 0;
  left: 0;
}

/* Recommended styles for Splitting */
.splitting .word,
.splitting .char {
  display: inline-block;
}

/* Psuedo-element chars */
.splitting .char {
  position: relative;
}

/**
 * Populate the psuedo elements with the character to allow for expanded effects
 * Set to `display: none` by default; just add `display: block` when you want
 * to use the psuedo elements
 */
.splitting .char::before,
.splitting .char::after {
  content: attr(data-char);
  position: absolute;
  top: 0;
  left: 0;
  visibility: hidden;
  transition: inherit;
  user-select: none;
}

/* Expanded CSS Variables */
.splitting {
  /* The center word index */
  --word-center: calc((var(--word-total) - 1) / 2);
  /* The center character index */
  --char-center: calc((var(--char-total) - 1) / 2);
  /* The center character index */
  --line-center: calc((var(--line-total) - 1) / 2);
}

.splitting .word {
  /* Pecent (0-1) of the word's position */
  --word-percent: calc(var(--word-index) / var(--word-total));
  /* Pecent (0-1) of the line's position */
  --line-percent: calc(var(--line-index) / var(--line-total));
}

.splitting .char {
  /* Percent (0-1) of the char's position */
  --char-percent: calc(var(--char-index) / var(--char-total));
  /* Offset from center, positive & negative */
  --char-offset: calc(var(--char-index) - var(--char-center));
  /* Absolute distance from center, only positive */
  --distance: calc(
     (var(--char-offset) * var(--char-offset)) / var(--char-center)
  );
  /* Distance from center where -1 is the far left, 0 is center, 1 is far right */
  --distance-sine: calc(var(--char-offset) / var(--char-center));
  /* Distance from center where 1 is far left/far right, 0 is center */
  --distance-percent: calc((var(--distance) / var(--char-center)));
}

.splitting.cells img {
  width: 100%;
  display: block;
}

@supports (display: grid) {
  .splitting.cells {
    position: relative;
    overflow: hidden;
    background-size: cover;
    visibility: hidden;
  }
  .splitting .cell-grid {
    background: inherit;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: grid;
    grid-template: repeat(var(--row-total), 1fr)/repeat(var(--col-total), 1fr);
  }
  .splitting .cell {
    background: inherit;
    position: relative;
    overflow: hidden;
  }
  .splitting .cell-inner {
    background: inherit;
    position: absolute;
    visibility: visible;
    /* Size to fit the whole container size */
    width: calc(100% * var(--col-total));
    height: calc(100% * var(--row-total));
    /* Position properly */
    left: calc(-100% * var(--col-index));
    top: calc(-100% * var(--row-index));
  }
  /* Helper variables for advanced effects */
  .splitting .cell {
    --center-x: calc((var(--col-total) - 1) / 2);
    --center-y: calc((var(--row-total) - 1) / 2);
    /* Offset from center, positive & negative */
    --offset-x: calc(var(--col-index) - var(--center-x));
    --offset-y: calc(var(--row-index) - var(--center-y));
    /* Absolute distance from center, only positive */
    --distance-x: calc( (var(--offset-x) * var(--offset-x)) / var(--center-x) );
    /* Absolute distance from center, only positive */
    --distance-y: calc( (var(--offset-y) * var(--offset-y)) / var(--center-y) );
  }
}
.work, .home {
  opacity: 0;
  visibility: hidden;
}

.info__text__subtitle {
  font-family: "Butler";
  font-size: 2.5rem;
}

.work__selected__element__lh__text__title__text {
  font-family: "Butler";
  font-size: 7rem;
}

.home__selected__title {
  font-family: "Butler";
  font-size: 8rem;
}

.home__title {
  font-family: "Butler";
  font-size: 12rem;
}

.navigation__contact {
  font-family: "SF Pro Display";
  font-size: 1.2rem;
}

.info__text__title, .navigation__link, body {
  font-family: "SF Pro Display";
  font-size: 1.6rem;
}

.work__selected__element__rh__description, .home__selected__article, .preloader__number__text {
  font-family: "SF Pro Display";
  font-size: 1.8rem;
}

.work__selected__element__lh__text__details__detail, .work__menu__element__area {
  font-family: "SF Pro Display";
  font-size: 2rem;
}

.work__menu__element__title {
  font-family: "SF Pro Display";
  font-size: 10rem;
}

@font-face {
  font-family: "Butler";
  src: url(39067711eb22ef463f2a.woff2) format("woff2"), url(7704cc6b567d92ede0f6.woff) format("woff"), url(c589fdca3db8a96f28bb.otf) format("opentype");
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: "SF Pro Display";
  src: url(d2ad20735a8cf4815ff6.woff2) format("woff2"), url(2a8f723b612ff2786aa3.woff) format("woff"), url(d1f5e6e16dd4f75c3950.otf) format("opentype");
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: "n27regular";
  src: url(75e9d40749712908dcc8.eot);
  src: url(75e9d40749712908dcc8.eot?#iefix) format("embedded-opentype"), url(d830597ebadd9aefaa0c.woff2) format("woff2"), url(a7c2d0c96c6b3e337776.woff) format("woff"), url(1c10e14b449c29c11181.ttf) format("truetype");
  font-weight: normal;
  font-style: normal;
}
* {
  box-sizing: border-box;
  user-select: none;
}

html {
  font-size: 0.5208333333vw;
  overscroll-behavior: none;
  overflow: hidden;
  position: fixed;
  background: #fffcf2;
  color: #252422;
}
@media (max-width: 768px) {
  html {
    font-size: 1.3333333333vw;
  }
}

body {
  position: fixed;
}

canvas {
  position: relative;
  z-index: 2;
  pointer-events: none;
}

a {
  color: inherit;
  text-decoration: none;
  outline: none;
}

img {
  opacity: 1;
  transition: opacity 0.5s ease;
  vertical-align: middle;
}
img.loaded {
  opacity: 1;
}

.preloader {
  z-index: 8;
  background: #fffcf2;
}
.preloader__logo {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 12rem;
  overflow: hidden;
}
.preloader__border {
  position: absolute;
  top: 9.9rem;
  left: 0;
  background: #ccc5b9;
  height: 1px;
  width: 100%;
}
@media (max-width: 768px) {
  .preloader__border {
    top: 12.4rem;
  }
}
.preloader__number {
  position: absolute;
  top: 4rem;
  left: 50%;
  transform: translateX(-50%);
  z-index: 4;
  overflow: hidden;
}
@media (max-width: 768px) {
  .preloader__number__text {
    font-size: 3rem;
  }
}

.navigation {
  z-index: 7;
  position: fixed;
  width: 100%;
  height: 10rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #ccc5b9;
  background: rgba(255, 252, 242, 0.4039215686);
  backdrop-filter: blur(10px);
}
@media (max-width: 768px) {
  .navigation {
    height: 12.5rem;
  }
}
.navigation__contact {
  position: absolute;
  top: 3rem;
  letter-spacing: 0.2rem;
}
@media (max-width: 768px) {
  .navigation__contact {
    display: none;
  }
}
.navigation__contact__city {
  margin-top: 0.5rem;
}
.navigation__contact__email {
  margin: 0.5rem;
  margin-left: 0;
}
.navigation__contact__email__active {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 0.2rem;
  background: #252422;
  transform: scaleX(0);
  transform-origin: left;
}
.navigation__logo {
  position: absolute;
  top: 3rem;
  left: 50%;
  transform: translateX(-50%);
  width: 12rem;
  overflow: hidden;
  transition: all 0.2s ease-in-out;
}
@media (max-width: 768px) {
  .navigation__logo {
    width: 20rem;
  }
}
.navigation__logo:hover {
  opacity: 0.8;
}
.navigation__link {
  position: absolute;
  top: 4rem;
  text-transform: uppercase;
  transition: all 0.2s ease-in-out;
  overflow: hidden;
}
@media (max-width: 768px) {
  .navigation__link {
    font-size: 3rem;
  }
}
.navigation__link:hover {
  color: #eb5e28;
}
.navigation__link__active {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 0.2rem;
  background: #252422;
  transform: scaleX(0);
  transform-origin: left;
}

.contact__left {
  left: 25%;
  transform: translateX(-50%);
  text-align: right;
}

.contact__right {
  right: 25%;
  transform: translateX(50%);
}

.link__left {
  left: 10rem;
}

.link__right {
  right: 10rem;
}

.home {
  overflow: hidden;
}
.home__title {
  white-space: nowrap;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
@media (max-width: 768px) {
  .home__title {
    font-size: 7rem;
    top: 25%;
  }
}
.home__showcase {
  z-index: 4;
  position: absolute;
  bottom: 4rem;
  left: 0;
  width: 100%;
  display: flex;
  justify-content: space-evenly;
  align-items: center;
}
@media (max-width: 768px) {
  .home__showcase {
    flex-wrap: wrap;
    gap: 5rem;
  }
}
.home__showcase__element {
  height: 15rem;
  width: 26rem;
  cursor: pointer;
}
@media (max-width: 768px) {
  .home__showcase__element {
    width: 30rem;
    height: 20rem;
  }
}
.home__showcase__element__media {
  height: 100%;
  width: 100%;
}
.home__showcase__element__media__figure {
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.home__showcase__element__media__figure__image {
  height: 100%;
  width: 100%;
  object-fit: cover;
}
.home__selected {
  z-index: 3;
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  padding: 4rem;
  display: grid;
}
@media (max-width: 768px) {
  .home__selected {
    padding-top: 15rem;
  }
}
.home__selected__element {
  grid-area: 1/1/-1/-1;
  height: 100%;
  width: 100%;
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: 15rem 25rem 25rem 1fr;
  gap: 2.5rem;
  opacity: 0;
}
@media (max-width: 768px) {
  .home__selected__element {
    display: flex;
    flex-direction: column;
    height: 100dvh;
  }
}
.home__selected__smImage {
  grid-area: 3/1/-1/2;
  align-self: flex-end;
  justify-self: flex-end;
  height: 25rem;
  width: 40rem;
  margin-bottom: 7rem;
}
@media (max-width: 768px) {
  .home__selected__smImage {
    align-self: center;
    margin-bottom: 0;
  }
}
.home__selected__smImage__figure {
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.home__selected__smImage__figure__image {
  height: 100%;
  width: 100%;
  object-fit: cover;
}
.home__selected__image {
  grid-area: 2/2/-1/4;
  align-self: flex-end;
  height: 45rem;
  width: 100%;
  margin-bottom: 7rem;
}
@media (max-width: 768px) {
  .home__selected__image {
    margin-bottom: 0rem;
    height: 45rem;
  }
}
.home__selected__title {
  line-height: 7rem;
  grid-area: 1/1/3/-1;
  align-self: center;
  justify-self: center;
  text-align: center;
  white-space: nowrap;
}
@media (max-width: 768px) {
  .home__selected__title {
    font-size: 5rem;
  }
}
.home__selected__article {
  grid-area: 2/4/-1/-1;
  align-self: flex-end;
  margin-bottom: 7rem;
  line-height: 2.5rem;
  letter-spacing: 0.05rem;
}
@media (max-width: 768px) {
  .home__selected__article {
    align-self: center;
    font-size: 2.5rem;
  }
}
.home__selected__name {
  font-family: "n27regular";
  font-size: 2rem;
  text-transform: uppercase;
  grid-area: 2/1/4/2;
  align-self: center;
  justify-self: center;
  display: flex;
  gap: 2rem;
}
@media (max-width: 768px) {
  .home__selected__name {
    font-size: 2.5rem;
  }
}
.home__selected__name__text {
  white-space: nowrap;
}
.home__selected__link {
  grid-area: 3/1/4/2;
  align-self: flex-start;
  justify-self: center;
  margin-top: 2rem;
}
@media (max-width: 768px) {
  .home__selected__link {
    display: none;
  }
}
.home__selected__back {
  position: absolute;
  bottom: 4rem;
  left: 50%;
  transform: translateX(-50%) scale(0);
  width: 10rem;
  height: 4rem;
  border: 1px solid #252422;
  border-radius: 5px;
  cursor: pointer;
  display: grid;
  place-content: center;
  background: #252422;
  color: #fffcf2;
}
@media (max-width: 768px) {
  .home__selected__back {
    width: fit-content;
    height: fit-content;
    padding: 0.5rem 1.5rem;
  }
}
.home__selected__back__text {
  font-family: "n27regular";
  font-size: 2rem;
  text-transform: uppercase;
  width: fit-content;
}
@media (max-width: 768px) {
  .home__selected__back__text {
    font-size: 5rem;
  }
}

.work {
  overflow: hidden;
}
.work__menu {
  z-index: 4;
}
.work__menu__wrapper {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -4rem);
  display: flex;
  flex-direction: column;
  gap: 5rem;
}
.work__menu__element {
  position: relative;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  gap: 4rem;
  padding: 4rem;
  cursor: pointer;
  transform-origin: center;
}
@media (max-width: 768px) {
  .work__menu__element {
    width: 100dvw;
  }
}
.work__menu__element__border {
  position: absolute;
  bottom: 0;
  right: 0;
  height: 2px;
  width: 100%;
  transform-origin: right;
  background: #ccc5b9;
  transform: scaleX(0);
}
.work__menu__element__left {
  left: 0;
  transform-origin: left;
}
.work__menu__element__right {
  right: 0;
  transform-origin: right;
}
.work__menu__element__media {
  height: 6.7rem;
  width: 12rem;
}
.work__menu__element__media__figure {
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.work__menu__element__media__figure__image {
  height: 100%;
  width: 100%;
  object-fit: cover;
}
.work__menu__element__title {
  text-transform: uppercase;
  line-height: 8rem;
  text-align: left;
  overflow: hidden;
}
@media (max-width: 768px) {
  .work__menu__element__title {
    font-size: 5rem;
  }
}
.work__menu__element__area {
  align-self: flex-start;
  white-space: nowrap;
  border: 1px solid #252422;
  border-radius: 5px;
  padding: 0.5rem 1rem;
}
.work__selected {
  z-index: 3;
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  padding: 4rem;
  padding-bottom: 10rem;
  display: grid;
  opacity: 0;
}
@media (max-width: 768px) {
  .work__selected {
    padding-top: 15rem;
  }
}
.work__selected__element {
  grid-area: 1/1/-1/-1;
  display: flex;
  align-items: flex-end;
  justify-content: center;
  gap: 5rem;
}
@media (max-width: 768px) {
  .work__selected__element {
    align-items: center;
    flex-direction: column;
    gap: 0;
    width: 100%;
  }
}
.work__selected__element__lh {
  display: flex;
  align-items: flex-start;
  flex-direction: column;
  gap: 2rem;
  width: 92rem;
}
@media (max-width: 768px) {
  .work__selected__element__lh {
    width: 60rem;
    padding: 2rem;
  }
}
.work__selected__element__lh__text {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 2rem;
}
.work__selected__element__lh__text__title {
  overflow: hidden;
}
.work__selected__element__lh__text__title__text {
  text-transform: uppercase;
  line-height: 7rem;
  white-space: nowrap;
}
@media (max-width: 768px) {
  .work__selected__element__lh__text__title__text {
    font-size: 5rem;
    white-space: initial;
  }
}
.work__selected__element__lh__text__details {
  width: 100%;
  display: flex;
  justify-content: flex-start;
  gap: 2rem;
  overflow: hidden;
}
.work__selected__element__lh__text__details__detail {
  border: 1px solid #252422;
  border-radius: 5px;
  padding: 0.5rem 1rem;
}
.work__selected__element__lh__media {
  width: 92rem;
  height: 52rem;
}
@media (max-width: 768px) {
  .work__selected__element__lh__media {
    width: 100%;
    padding: 0.5rem;
    height: 40rem;
  }
}
.work__selected__element__lh__media__figure {
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.work__selected__element__lh__media__figure__image {
  height: 100%;
  width: 100%;
  object-fit: cover;
}
.work__selected__element__rh {
  height: 100%;
  display: flex;
  justify-content: flex-end;
  align-items: flex-start;
  flex-direction: column;
  gap: 4rem;
}
@media (max-width: 768px) {
  .work__selected__element__rh {
    gap: 4rem;
    align-items: center;
    flex-direction: column-reverse;
  }
}
.work__selected__element__rh__media {
  width: 46rem;
  height: 30rem;
}
.work__selected__element__rh__media__figure {
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.work__selected__element__rh__media__figure__image {
  height: 100%;
  width: 100%;
  object-fit: cover;
}
.work__selected__element__rh__description {
  margin-top: 2rem;
  letter-spacing: 0.05rem;
}
@media (max-width: 768px) {
  .work__selected__element__rh__description {
    font-size: 2.5rem;
  }
}
.work__selected__element__rh__description__text {
  overflow: hidden;
}
.work__selected__element__rh__description__text span {
  overflow: hidden;
}
.work__selected__back {
  position: absolute;
  bottom: 4rem;
  left: 50%;
  transform: translateX(-50%) scale(0);
  width: 10rem;
  height: 4rem;
  border: 1px solid #252422;
  border-radius: 5px;
  cursor: pointer;
  display: grid;
  place-content: center;
  background: #252422;
  color: #fffcf2;
}
@media (max-width: 768px) {
  .work__selected__back {
    width: fit-content;
    height: fit-content;
    padding: 0.5rem 1.5rem;
  }
}
.work__selected__back__text {
  font-family: "n27regular";
  font-size: 2rem;
  text-transform: uppercase;
  width: fit-content;
}
@media (max-width: 768px) {
  .work__selected__back__text {
    font-size: 5rem;
  }
}

.border__active {
  position: absolute;
  bottom: 0;
  height: 2px;
  width: 50%;
  background: #252422;
  transform: scaleX(0);
}

.info__wrapper {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  gap: 5rem;
  justify-content: center;
  align-items: flex-end;
  width: 100%;
  height: 100%;
  padding-bottom: 10rem;
}
@media (max-width: 768px) {
  .info__wrapper {
    flex-direction: column;
    align-items: center;
    padding-top: 10rem;
  }
}
.info__text__title {
  text-transform: uppercase;
  width: fit-content;
  border: 1px solid #252422;
  border-radius: 5px;
  padding: 0.5rem;
}
@media (max-width: 768px) {
  .info__text__title {
    font-size: 2.5rem;
  }
}
.info__text__subtitle {
  margin: 2rem 0;
}
@media (max-width: 768px) {
  .info__text__subtitle {
    font-size: 3rem;
  }
}
@media (max-width: 768px) {
  .info__text__desc {
    font-size: 2.2rem;
  }
}
.info__media {
  height: 60rem;
  width: 60rem;
}
@media (max-width: 768px) {
  .info__media {
    width: 100dvw;
    height: 100%;
  }
}
.info__media__figure {
  height: 100%;
  width: 100%;
}
.info__media__figure__image {
  height: 100%;
  width: 100%;
  object-fit: cover;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/